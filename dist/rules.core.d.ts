export declare const rules: {
    readonly "quasar-extension/vue/script/consistent-expose-arg": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/script/no-global-icons": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/script/no-global-lang": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/script/require-validateEmit-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/script/require-validateProps-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-mixed-classes": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-btn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-card": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-card-actions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-card-section": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-expansion-item": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-field": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-form": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-input": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-item": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-knob": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-menu": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-option-group": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-popup-proxy": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-select": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-toggle": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/no-q-tooltip": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/prefer-label-prop": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/vue/template/prefer-lang-var": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/no-computed-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/no-ref-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/no-ref-undefined": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/require-ref-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/jest/prefer-findQuasarComponent": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/jest/prefer-testComponents": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/no-empty-interfaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/check-Props-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/check-Slots-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/no-OwnProps-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/no-OwnSlots-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/prefer-OwnProps": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "quasar-extension/extras/prefer-OwnSlots": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/require-jsdoc").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/require-jsdoc").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/prefer-ReadonlyMap": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/prefer-ReadonlySet": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/fromIterable-arg-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/mixedFrom-include-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/mixedFrom-include-non-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-clone": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-first": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-fromIterable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-reverse": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-second": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-sort": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-third": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/array/prefer-truncate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/converters/prefer-number": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/converters/prefer-string": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/array-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/array-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/boolean-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/boolean-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/callable-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/callable-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/enumeration-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/false-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/indexedObject-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/indexedObject-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/instanceOf-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/map-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/not-empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/not-empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/null-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/null-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/numStr-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/numStr-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/number-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/number-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/object-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/object-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/require-object-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/set-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/string-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/string-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/symbol-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/symbol-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/true-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/tuple-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/undefined-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/guards/undefined-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/json/prefer-json": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-clone": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/no-array-arg": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/no-get": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/no-set": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/no-unfreeze": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-entries": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-getPrototypeOf": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-hasOwnProp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/object/prefer-values": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/program-flow/prefer-clearInterval": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/program-flow/prefer-clearTimeout": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/program-flow/prefer-setInterval": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/program-flow/prefer-setTimeout": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/reflect/no-get": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/reflect/no-set": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/reflect/prefer-reflect": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/no-Writable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/no-ts-toolbelt": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-IndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-IndexedRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-NumStr": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-PartialRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-WritableIndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-WritableRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-undefined-shorthand-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-undefined-shorthand-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/types/prefer-undefined-shorthand-typeName": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/no-evaluate-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/prefer-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/prefer-evaluate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/require-return-in-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "functions/jest/prefer-mockCallsToBe": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "facades/prefer-uniqueId-facade": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/eslintrc/no-disable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/eslintrc/no-rules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/eslintrc/no-temp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/eslintrc/sort-synonyms": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/prettier": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "config/sort-commitlint": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/no-complex-declarator-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/element-contents-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./vue/core/element-contents-spacing").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/sort-v-bind": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./vue/core/sort-v-bind").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/component-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/match-filename").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/match-filename").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "vue/no-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/array-callback-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/array-callback-return-type").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/exhaustive-switch": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/exhaustive-switch").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-inferrable-types": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-inferrable-types").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-multi-type-tuples": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-multi-type-tuples").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-restricted-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-unsafe-object-assignment": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-unsafe-object-assignment").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-shadow": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/wrap").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/wrap").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/consistent-array-type-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/define-function-in-one-statement": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-boolean-literal-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-complex-declarator-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-empty-interfaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-never": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-this-void": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/no-unsafe-object-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-ReadonlyMap": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-ReadonlySet": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-array-type-alias": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-enum": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-readonly-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/prefer-readonly-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "typescript/require-prop-type-annotation": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "jest/no-toThrow-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "jest/prefer-toBe": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "jest/prefer-toStrictEqual": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./typescript/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc/sort-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc/no-message-dot": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc/no-unnecessary-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc/sort-suboptions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "class-match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/match-filename").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/match-filename").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "class-only-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/prefer-only-export").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/prefer-only-export").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-source-extension": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-symbol-description": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "max-identifier-blocks": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-internal-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-chain-coalescence-mixture": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-index-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-internal-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-language-mixing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-negated-conditions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-nodejs-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-relative-parent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-underscore-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-as-const": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-break": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-initialization": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-function-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-static-method": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-const-require": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "restrict-identifier-characters": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-call-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-construct-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "comment-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/comment-spacing").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/consistent-empty-lines").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, import("./misc/core/consistent-empty-lines").Suboptions, "rules">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-enum-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/consistent-enum-members").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/consistent-filename").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/consistent-filename").Options, import("./misc/core/consistent-filename").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/consistent-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, import("./misc/core/consistent-import").Suboptions, "sources">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-optional-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/consistent-optional-props").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/consistent-optional-props").Options, import("./misc/core/consistent-optional-props").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "disallow-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/disallow-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "export-matching-filename-only": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/export-matching-filename-only").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/match-filename").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/match-filename").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-expression-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-expression-empty-lines").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-restricted-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-restricted-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-self-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-self-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-sibling-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-sibling-import").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, import("./misc/core/no-sibling-import").Suboptions, "rules">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-template-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/no-unnecessary-template-literal").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/object-format").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/object-format").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "only-export-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/only-export-name").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-only-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/prefer-only-export").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/prefer-only-export").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/require-jsdoc").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/require-jsdoc").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/require-syntax").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/require-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-class-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-class-members").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-keys").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, import("./misc/core/sort-keys").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-statements": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/sort-statements").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-top-comments": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-top-comments").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "switch-case-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/switch-case-spacing").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template-literal-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/template-literal-format").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly wrap: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/wrap").MessageId, import("./utils/create-rule.internal").PartialOptionsArray<import("./misc/core/wrap").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=rules.core.d.ts.map