export declare const core: {
    readonly "class-match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/match-filename").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/match-filename").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-source-extension": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-symbol-description": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "max-identifier-blocks": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-internal-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-chain-coalescence-mixture": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-index-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-internal-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-language-mixing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-negated-conditions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-nodejs-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-relative-parent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-underscore-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-as-const": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-break": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-initialization": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-function-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-static-method": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-const-require": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "restrict-identifier-characters": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-call-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-construct-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "comment-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/comment-spacing").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/consistent-empty-lines").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, import("./base/consistent-empty-lines").Suboptions, "rules">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-enum-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/consistent-enum-members").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/consistent-filename").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/consistent-filename").Options, import("./base/consistent-filename").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/consistent-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, import("./base/consistent-import").Suboptions, "sources">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-optional-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/consistent-optional-props").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/consistent-optional-props").Options, import("./base/consistent-optional-props").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "disallow-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/disallow-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/disallow-import").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "export-matching-filename-only": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/export-matching-filename-only").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/match-filename").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/match-filename").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-expression-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-expression-empty-lines").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-restricted-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-self-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-self-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-sibling-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-sibling-import").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, import("./base/no-sibling-import").Suboptions, "rules">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-template-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/no-unnecessary-template-literal").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/object-format").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/object-format").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "only-export-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/only-export-name").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-only-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/prefer-only-export").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/prefer-only-export").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/require-jsdoc").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/require-jsdoc").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/require-syntax").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/require-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId | import("./base/sort-array").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/sort-array").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-class-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/sort-class-members").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId | import("./base/sort-keys").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, import("./base/sort-keys").Suboptions, "overrides">, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-statements": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/sort-statements").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-top-comments": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId | import("./base/sort-top-comments").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "switch-case-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/switch-case-spacing").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template-literal-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/template-literal-format").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly wrap: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./base/wrap").MessageId, import("../utils/create-rule.internal").PartialOptionsArray<import("./base/wrap").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=index.d.ts.map