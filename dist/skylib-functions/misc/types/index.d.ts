import { o } from "@skylib/functions";
export declare const types: o.PrefixKeys<{
    "no-Writable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-ts-toolbelt": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-IndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-IndexedRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-NumStr": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-PartialRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-WritableIndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-WritableRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-undefined-shorthand-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-undefined-shorthand-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-undefined-shorthand-typeName": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../misc/core/no-restricted-syntax").MessageId, import("../../../utils/create-rule.internal").PartialOptionsArray<import("../../../misc/core/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "types/">;
//# sourceMappingURL=index.d.ts.map