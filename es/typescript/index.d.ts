import { o } from "typescript-misc";
export declare const typescript: o.PrefixKeys<{
    "class-methods-use-this": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("../core/base/wrap").MessageId, import("../utils/create-rule").PartialOptionsArray<import("../core/base/wrap").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "consistent-array-type-name": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "define-function-in-one-statement": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-boolean-literal-type": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-complex-declarator-type": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-empty-interfaces": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-never": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-unsafe-object-assign": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-array-type-alias": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-class-method": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-readonly-array": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-readonly-map": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-readonly-property": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-readonly-set": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "require-prop-type-annotation": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "require-this-void": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "array-callback-return-type": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/array-callback-return-type").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "exhaustive-switch": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/exhaustive-switch").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-inferrable-types": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-inferrable-types").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-multi-type-tuples": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-multi-type-tuples").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-restricted-syntax": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-restricted-syntax").MessageId, import("../utils/create-rule").PartialOptionsArray<import("./base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "no-unsafe-object-assignment": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/no-unsafe-object-assignment").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
    "prefer-enum": import("@typescript-eslint/utils/dist/ts-eslint").RuleModule<import("./base/prefer-enum").MessageId, import("../utils/create-rule").PartialOptionsArray<object, object, never>, import("@typescript-eslint/utils/dist/ts-eslint").RuleListener>;
}, "typescript/">;
//# sourceMappingURL=index.d.ts.map