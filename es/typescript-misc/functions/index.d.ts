import { o } from "typescript-misc";
export declare const functions: o.PrefixKeys<{
    "object/prefer-clone": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/no-array-arg": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/no-get": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/no-set": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/no-unfreeze": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-entries": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-getPrototypeOf": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-hasOwnProp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-omitKeys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object/prefer-values": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "json/prefer-json": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/array-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/array-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/boolean-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/boolean-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/callable-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/callable-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/enumeration-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/false-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/indexedObject-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/indexedObject-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/instanceOf-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/map-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/not-empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/not-empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/null-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/null-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/numStr-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/numStr-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/number-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/number-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/object-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/object-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/require-object-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/set-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/string-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/string-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/symbol-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/symbol-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/true-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/tuple-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/undefined-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "guards/undefined-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "converters/prefer-number": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "converters/prefer-string": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/fromIterable-arg-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/mixedFrom-include-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/mixedFrom-include-non-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-clone": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-first": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-fromIterable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-reverse": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-second": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-sort": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-third": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array/prefer-truncate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../typescript/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-evaluate-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-evaluate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-readonly-map": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-readonly-set": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/require-jsdoc").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/require-jsdoc").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "require-return-in-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../core/base/no-restricted-syntax").MessageId, import("../../utils/create-rule.internal").PartialOptionsArray<import("../../core/base/no-restricted-syntax").Options, object, never>, import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "functions/">;
//# sourceMappingURL=index.d.ts.map